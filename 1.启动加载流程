spring-cloud-gateway-sample项目启动，
需要添加注释@EnableAutoConfiguration默认加载spring-could-gateway-core里的spring-factories里的配置默认启动类
org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.springframework.cloud.gateway.config.GatewayClassPathWarningAutoConfiguration,\
org.springframework.cloud.gateway.config.GatewayAutoConfiguration,\
org.springframework.cloud.gateway.config.GatewayLoadBalancerClientAutoConfiguration,\
org.springframework.cloud.gateway.config.GatewayRedisAutoConfiguration,\
org.springframework.cloud.gateway.discovery.GatewayDiscoveryClientAutoConfiguration
在以上自动加载配置的类中，GatewayClassPathWarningAutoConfiguration，GatewayRedisAutoConfiguration, GatewayDiscovRibbonAutoConfiguratioeryClientAutoConfiguration
都是在GatewayAutoConfiguration加载之后再加载，GatewayLoadBalancerClientAutoConfiguration加载之后记载RibbonAutoConfiguration类。
下面看下GatewayAutoConfiguration类的加载逻辑
  注解如下：
  @ConditionalOnProperty(name = "spring.cloud.gateway.enabled", matchIfMissing = true) 
  应用环境中需要有spring.cloud.gateway.enabled配置，但不是必须的
  
  @EnableConfigurationProperties
  应用环境中有带有@ConfigurationProperties的bean提供有效的支持
  
  @AutoConfigureBefore(HttpHandlerAutoConfiguration.class)
  加载GatewayAutoConfiguration类前先加载HttpHandlerAutoConfiguration的bean这里用到webflux
  
  @AutoConfigureAfter({GatewayLoadBalancerClientAutoConfiguration.class, GatewayClassPathWarningAutoConfiguration.class})
  加载完GatewayAutoConfiguration类之后初始化GatewayLoadBalancerClientAutoConfiguration，GatewayClassPathWarningAutoConfiguration类
  
  @ConditionalOnClass(DispatcherHandler.class)
  类加载中存在DispatcherHandler.class,才初始化这个bean
  
  代码如下：
  初始化NettyConfiguration这个bean，同时检查类路径中存在HttpClient.class,初始化HttpClient这个bean和Consumer这个bean；
  初始化HttpClientProperties，NettyRoutingFilter，NettyWriteResponseFilter，ReactorNettyWebSocketClient，RouteLocatorBuilder
        PropertiesRouteDefinitionLocator(没有则创建)，InMemoryRouteDefinitionRepository(RouteDefinitionRepository(没有则创建))，
        RouteDefinitionLocator,RouteLocator(RouteDefinitionRouteLocator,CachingRouteLocator(首选bean)),RouteRefreshListener,
        FilteringWebHandler,RoutePredicateHandlerMapping,GatewayProperties,SecureHeadersProperties,ForwardedHeadersFilter,
        RemoveHopByHopHeadersFilter,XForwardedHeadersFilter,AdaptCachedBodyGlobalFilter,RouteToRequestUrlFilter
  
   
